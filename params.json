{"name":"ngGeolocation","tagline":"AngularJS support for HTML5 Geolocation API","body":"**ngGeolocation** provides AngularJS support for the [HTML5 Geolocation API](http://www.w3.org/TR/geolocation-API/). It aims to provide a quick and easy way to consume geolocation information made available by modern browsers and HTML5 in AngularJS apps wtihout having to write custom SDK wrapping code. Everything exposed by the `$geolocation` service lives within the digest cycle, so there is no need to use `$scope.$apply()` in your controllers when consuming the service. **ngGeolocation** goes one step further than wrapping the HTML5 API calls and provides a property that can be `$watch`ed by your controllers which will always contain the latest position data available through the browser.\r\n\r\n[API Reference](https://github.com/ninjatronic/ngGeolocation/wiki/API-Reference)\r\n\r\n## Installation\r\n\r\n### Bower\r\n\r\nThe bower package name is `ngGeolocation`.\r\n\r\n#### via `bower.json`\r\n\r\n```javascript\r\n{\r\n    \"dependencies\": {\r\n        \"ngGeolocation\": \">=0.0.2\"\r\n    }\r\n}\r\n```\r\n\r\n#### via CLI\r\n\r\n```\r\nbower install ngGeolocation\r\n```\r\n\r\nInclude the installed scripts in your html...\r\n\r\n```html\r\n<script src=\"bower_components/ngGeolocation.min.js\"/>\r\n```\r\n\r\n### Manual\r\n\r\nDownload the [minified](https://github.com/ninjatronic/ngGeolocation/blob/v0.0.2/ngGeolocation.min.js) or [unminified](https://github.com/ninjatronic/ngGeolocation/blob/v0.0.2/ngGeolocation.js) source.\r\n\r\nInclude the scripts in your html...\r\n\r\n```html\r\n<script src=\"lib/ngGeolocation.min.js\"/>\r\n```\r\n\r\n## Usage\r\n\r\nMake sure your app depends on the `ngGeolocation` module. Geolocation methods are available through the `$geolocation` service.\r\n\r\n```javascript\r\nangular\r\n    .module('myApp', ['ngGeolocation'])\r\n    .controller('geolocCtrl', ['$geolocation', '$scope', function($geolocation, $scope) {\r\n         $scope.myPosition = $geolocation.getCurrentPosition({\r\n            timeout: 60000\r\n         });\r\n    }]);\r\n```\r\n\r\nThe `$geolocation` service can expose a property `location` whose value reflects the current position. To enable this feature a watch must be created using `watchPosition`. This method takes a `PositionOptions` object in the same manner as `getCurrentPosition`. There is no return value.\r\n\r\nWhile this watch is active the value of the property `location` is periodically updated with the latest geolocatopm result. If an error has occurred the code and message are available via `$geolocation.position.error`.\r\n\r\nThe current watch can be cancelled using `clearWatch`.\r\n\r\n```javascript\r\nangular\r\n    .module('myApp', ['ngGeolocation'])\r\n    .controller('geolocCtrl', ['$geolocation', '$scope', function($geolocation. $scope) {\r\n        $geolocation.watchPosition({\r\n            timeout: 60000,\r\n            maximumAge: 250,\r\n            enableHighAccuracy: true\r\n        };\r\n        $scope.myCoords = $geolocation.position.coords; // this is regularly updated\r\n        $scope.myError = $geolocation.position.error; // this becomes truthy, and has 'code' and 'message' if an error occurs\r\n    }]);\r\n```\r\n\r\n## Development\r\n\r\nThis project uses Grunt for tooling. The toolbelt dependencies are managed by Grunt and the production code dependencies are managed by Bower. Fork the code and clone it into your workspace, then...\r\n\r\n```\r\nnpm install\r\nbower install --dev\r\n```\r\n\r\nTests can be run manually with `grunt test` or automatically on changes with `grunt`.\r\n\r\nIf you wish to submit a pull request or an issue please include a test that demonstrates your addition.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}